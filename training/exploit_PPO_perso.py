import json
import torch
import copy
import numpy as np
import gymnasium as gym
import yaml

from tqdm import tqdm
from numpy import ndarray
from torch.distributions import Categorical

from mesh_model.mesh_analysis.quadmesh_analysis import QuadMeshOldAnalysis
from mesh_model.mesh_analysis.trimesh_analysis import TriMeshOldAnalysis, TriMeshQualityAnalysis
from mesh_model.mesh_struct.mesh_elements import Dart
from mesh_model.mesh_struct.mesh import Mesh
from mesh_model.reader import read_gmsh
from model_RL.PPO_model_pers import Actor

from view.mesh_plotter.create_plots import plot_test_results
from view.mesh_plotter.mesh_plots import plot_dataset
from environment.actions.smoothing import smoothing_mean

from environment.gymnasium_envs.quadmesh_env.envs.quadmesh import QuadMeshEnv
from environment.gymnasium_envs.trimesh_full_env.envs.trimesh import TriMeshEnvFull

import mesh_model.random_quadmesh as QM

def testPolicy(
        actor,
        n_eval_episodes: int,
        config,
        dataset: list[Mesh]
) -> tuple[ndarray, ndarray, ndarray, ndarray, list[Mesh]]:
    """
    Tests policy on each mesh of a dataset with n_eval_episodes.
    :param actor: the policy to test
    :param n_eval_episodes: number of evaluation episodes on each mesh
    :param config: configuration
    :param dataset: list of mesh objects
    :return: average length of evaluation episodes, number of wins,average reward per mesh, dataset with the modified meshes
    """
    print('Testing policy')
    avg_length = np.zeros(len(dataset))
    avg_mesh_rewards = np.zeros(len(dataset))
    avg_normalized_return = np.zeros(len(dataset))
    nb_wins = np.zeros(len(dataset))
    final_meshes = []
    for i, mesh in tqdm(enumerate(dataset, 1)):
        best_mesh = mesh
        env = gym.make(
            config["env"]["env_id"],
            max_episode_steps=config["env"]["max_episode_steps"],
            mesh=mesh,
            #mesh_size = 30,
            n_darts_selected=config["env"]["n_darts_selected"],
            deep=config["env"]["deep"],
            action_restriction=config["env"]["action_restriction"],
            with_quality_obs=config["env"]["with_quality_observation"],
            render_mode=config["env"]["render_mode"],
        )
        for _ in range(n_eval_episodes):
            terminated = False
            truncated = False
            ep_mesh_rewards: int = 0
            ep_length: int = 0
            observation, info = env.reset(options={"mesh": copy.deepcopy(mesh)})
            while terminated is False and truncated is False:
                obs = torch.tensor(observation.flatten(), dtype=torch.float32)
                pmf = actor.forward(obs)
                dist = Categorical(pmf)
                action = dist.sample()
                action = action.tolist()
                action_dart = int(action / config["ppo"]["n_actions"])
                action_type = action % config["ppo"]["n_actions"]
                gymnasium_action = [action_type, action_dart]
                if action is None:
                    env.terminal = True
                    break
                observation, reward, terminated, truncated, info = env.step(gymnasium_action)
                ep_mesh_rewards += info['mesh_reward']
                ep_length += 1
            if terminated:
                nb_wins[i-1] += 1
            if isBetterMesh(best_mesh, info['mesh'], config["env"]["analysis_type"]):
                best_mesh = copy.deepcopy(info['mesh'])
            avg_length[i-1] += ep_length
            avg_mesh_rewards[i-1] += ep_mesh_rewards
            avg_normalized_return[i-1] += 0 if info['mesh_ideal_rewards'] == 0 else ep_mesh_rewards/info['mesh_ideal_rewards']
        final_meshes.append(best_mesh)
        avg_length[i-1] = avg_length[i-1]/n_eval_episodes
        avg_mesh_rewards[i-1] = avg_mesh_rewards[i-1]/n_eval_episodes
        avg_normalized_return[i-1] = avg_normalized_return[i-1]/n_eval_episodes
    return avg_length, nb_wins, avg_mesh_rewards, avg_normalized_return, final_meshes


def isBetterPolicy(actual_best_policy, policy_to_test):
    if actual_best_policy is None:
        return True

def isBetterMesh(best_mesh, actual_mesh, analysis_type):
    tri = False
    for d_info in actual_mesh.dart_info:
        if d_info[0]>=0:
            d = Dart(actual_mesh, d_info[0])
            if d == ((d.get_beta(1)).get_beta(1)).get_beta(1):
                tri = True
            else:
                tri = False
            break
    if tri:
        if analysis_type == "old":
            ma_best_mesh = TriMeshOldAnalysis(best_mesh)
            ma_actual_mesh = TriMeshOldAnalysis(actual_mesh)
        else:
            ma_best_mesh = TriMeshQualityAnalysis(best_mesh)
            ma_actual_mesh = TriMeshQualityAnalysis(actual_mesh)
    else:
        ma_best_mesh = QuadMeshOldAnalysis(best_mesh)
        ma_actual_mesh = QuadMeshOldAnalysis(actual_mesh)
    if best_mesh is None or ma_best_mesh.global_score()[1] > ma_actual_mesh.global_score()[1]:
        return True
    else:
        return False


if __name__ == '__main__':

    #Create a dataset of 9 meshes
    mesh = read_gmsh("../mesh_files/t1_tri.msh")
    dataset = [mesh for _ in range(9)]
    with open("../training/config/trimesh_config_PPO_perso.yaml", "r") as f:
        config = yaml.safe_load(f)
    plot_dataset(dataset)

    env = gym.make(
        config["env"]["env_id"],
        max_episode_steps=config["env"]["max_episode_steps"],
        mesh=mesh,
        # mesh_size = 30,
        n_darts_selected=config["env"]["n_darts_selected"],
        deep=config["env"]["deep"],
        action_restriction=config["env"]["action_restriction"],
        with_quality_obs=config["env"]["with_quality_observation"],
        render_mode=config["env"]["render_mode"],
    )

    #Load the model
    actor = Actor(env, config["env"]["obs_size"], config["ppo"]["n_actions"], n_darts_observed=config["env"]["n_darts_selected"], lr=0.0001)
    actor.load_state_dict(torch.load('policy_saved/tri-perso/TEST-Exploit.pth'))
    avg_steps, avg_wins, avg_rewards, normalized_return, final_meshes = testPolicy(actor, 15, config, dataset)

    plot_test_results(avg_rewards, avg_wins, avg_steps, normalized_return)
    plot_dataset(final_meshes)
    for m in final_meshes:
        smoothing_mean(m)
    plot_dataset(final_meshes)
