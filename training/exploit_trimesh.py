import mesh_model.random_trimesh as TM
import torch
import json
import gymnasium as gym
from environment.trimesh_env import TriMesh
from model_RL.utilities.actor_critic_networks import Actor
from mesh_model.reader import read_gmsh
from view.mesh_plotter.create_plots import plot_test_results
from view.mesh_plotter.mesh_plots import plot_dataset
from environment.actions.smoothing import smoothing_mean
from model_RL.evaluate_model import testPolicy

LOCAL_MESH_FEAT = 0


def exploit():
    mesh_size = 12
    feature = LOCAL_MESH_FEAT

    dataset = [TM.random_mesh(30) for _ in range(9)]
    plot_dataset(dataset)

    env = TriMesh(None, mesh_size, max_steps=60, feat=feature)


    actor = Actor(env, 30, 15, lr=0.0001)
    actor.load_state_dict(torch.load('policy_saved/actor_network.pth'))

    avg_steps, avg_wins, avg_rewards, final_meshes = testPolicy(actor, 30, dataset, 100)

    if avg_steps is not None:
        plot_test_results(avg_rewards, avg_wins, avg_steps)
    plot_dataset(final_meshes)


if __name__ == '__main__':

    mesh = read_gmsh("../mesh_files/t1_quad.msh")

    #Create a dataset of 9 meshes
    dataset = [mesh for _ in range(9)]
    with open("../environment/environment_config.json", "r") as f:
        env_config = json.load(f)
    plot_dataset(dataset)

    env = gym.make(
        env_config["env_name"],
        mesh=read_gmsh("mesh_files/simple_quad.msh"),
        max_episode_steps=env_config["max_episode_steps"],
        n_darts_selected=env_config["n_darts_selected"],
        deep=env_config["deep"],
        action_restriction=env_config["action_restriction"],
        with_degree_obs=env_config["with_degree_observation"]
    )

    #Load the model
    actor = Actor(env, 10*8, 4*10, lr=0.0001)
    actor.load_state_dict(torch.load('policy_saved/actor_network.pth'))
    avg_steps, avg_wins, avg_rewards, final_meshes = testPolicy(actor, 15, dataset, 20)

    plot_test_results(avg_rewards, avg_wins, avg_steps, avg_wins)
    plot_dataset(final_meshes)
    for m in final_meshes:
        smoothing_mean(m)
    plot_dataset(final_meshes)
