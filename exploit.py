import model.random_trimesh as TM
import torch
from environment.trimesh_env import TriMesh
from model_RL.utilities.actor_critic_networks import Actor

from plots.create_plots import plot_training_results, plot_test_results
from plots.mesh_plotter import plot_dataset

from model_RL.evaluate_model import testPolicy

from model_RL.PPO_model import PPO

LOCAL_MESH_FEAT = 0


def exploit():
    mesh_size = 12
    feature = LOCAL_MESH_FEAT

    dataset = [TM.random_mesh(30) for _ in range(9)]
    plot_dataset(dataset)

    env = TriMesh(None, mesh_size, max_steps=60, feat=feature)


    actor = Actor(env, 30, 15, lr=0.0001)
    actor.load_state_dict(torch.load('policy saved/actor_30.pth'))

    avg_steps, avg_wins, avg_rewards, final_meshes = testPolicy(actor, 15, dataset, 60)

    if avg_steps is not None:
        plot_test_results(avg_rewards, avg_wins, avg_steps)
    plot_dataset(final_meshes)
